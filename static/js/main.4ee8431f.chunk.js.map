{"version":3,"sources":["features/chatbox/actions.js","Helpers/API.js","features/SearchModule/actions.js","features/SearchModule/GifSearch.js","features/chatbox/PostFb.js","App.js","features/SearchModule/reducers.js","features/chatbox/reducers.js","app/store.js","serviceWorker.js","index.js"],"names":["USER_POST_TEXT","REMOVE_SELECTED_URL","API","link","fetch","then","response","json","PROFILE_SUCCESS","SELECTED_URL","GifSearch","props","fatchProfiles","debounce","bind","handleChange","handleClickForSelectGif","state","searchValue","selectedUrl","evnt","this","setState","target","value","fetchProfile","fetchSelectedUrl","src","gifs","className","type","name","id","onChange","placeholder","map","p","images","preview_gif","url","onClick","Component","connect","gifData","profile","dispatch","data","catch","err","Postbox","handleClick","fetchPostText","text","postText","gif","removeSelectedUrl","handleShow","show","handleClose","isPost","event","postData","Button","variant","Modal","onHide","scrollable","Header","closeButton","Title","Body","size","disabled","txt","App","PostFb","action","console","log","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAAaA,EAAiB,iBACjBC,EAAsB,sBCGpBC,EAJH,SAACC,GACT,OAAOC,MAAMD,GACRE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCCtBC,EAAkB,kBAGlBC,EAAe,e,wBCAtBC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,cAAgBC,IAAS,EAAKD,cAAcE,KAAnB,gBAA+B,KAC7D,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,wBAA0B,EAAKA,wBAAwBF,KAA7B,gBAE/B,EAAKG,MAAQ,CACTC,YAAa,GACbC,YAAY,IARD,E,gDAYnB,SAAaC,GACVC,KAAKC,SAAS,CACTJ,YAAaE,EAAKG,OAAOC,QAE7BH,KAAKT,cAAeQ,EAAKG,OAAOC,S,2BAEpC,SAAcJ,GACVC,KAAKV,MAAMc,aAAaL,K,qCAE5B,SAAwBA,GACpBC,KAAKV,MAAMe,iBAAkBN,EAAKG,OAAOI,O,oBAE7C,WAAU,IAAD,OACCC,EAASP,KAAKV,MAAdiB,KACN,OACI,sBAAKC,UAAU,GAAf,UACG,8BACK,uBAAOC,KAAK,OAAOD,UAAU,gBAAgBE,KAAK,SAASC,GAAG,SAASR,MAAOH,KAAKJ,MAAMC,YAAae,SAAUZ,KAAKN,aAAcmB,YAAY,aAEzI,MAATN,GAA4B,MAAXA,EAAK,GAAa,wBAAU,qBAAKC,UAAU,GAAf,SAC1C,8BACKD,EAAKO,KAAI,SAAAC,GAAC,OACP,8BACI,qBAAKT,IAAKS,EAAEC,OAAOC,YAAYC,IAAMV,UAAU,MAAMW,QAAS,EAAKxB,2BAD7DoB,EAAEJ,kB,GApChBS,aAmDTC,eAJS,SAAAzB,GACpB,MAAO,CAAEW,KAAMX,EAAM0B,QAAQC,QAASL,IAAKtB,EAAM0B,QAAQJ,OAGrB,CAAEd,aDhDd,SAACO,GAAD,OAAQ,SAAAa,GAEhC,OADAA,EAAS,CAAEf,KARgB,oBASpB5B,EAAI,mFAAD,OAAoF8B,IACzF3B,MAAK,SAAAE,GAAI,OAAIsC,EAAS,CAAEf,KAAMtB,EAAiBsC,KAAMvC,EAAKuC,UAC1DC,OAAM,SAAAC,GAAG,OAAIH,EAAS,CAAEf,KATF,yBCqDyBJ,iBDzCxB,SAACa,GAAD,OAAS,SAAAM,GACrCA,EAAS,CAAEf,KAAMrB,EAAaqC,KAAKP,OCwCxBG,CAA4DhC,G,wBCjDrEuC,E,kDACD,WAAYtC,GAAQ,IAAD,8BAChB,cAAMA,IAoBVuC,YAAc,WACV,EAAKvC,MAAMwC,cAAc,CAACC,KAAO,EAAKnC,MAAMoC,SAAUC,IAAM,EAAK3C,MAAM4B,MACvE,EAAK5B,MAAM4C,kBAAkB,IAC7B,EAAKjC,SAAS,CAAC+B,SAAU,MAxBT,EA0BpBG,WAAY,WACR,EAAKlC,SAAS,CAACmC,MAAM,KA3BL,EA8BpBC,YAAc,WACV,EAAKpC,SAAS,CAACmC,MAAK,KA3BpB,EAAKP,YAAc,EAAKA,YAAYpC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAK0C,WAAa,EAAKA,WAAW1C,KAAhB,gBAClB,EAAK4C,YAAc,EAAKA,YAAY5C,KAAjB,gBAEnB,EAAKG,MAAQ,CACToC,SAAU,GACVM,QAAQ,EACRF,MAAK,GAZO,E,gDAkBpB,SAAaG,GACTvC,KAAKC,SAAS,CAAC+B,SAAUO,EAAMrC,OAAOC,U,oBAe1C,WAEI,IAAMqC,EAAaxC,KAAKV,MAAlBkD,SACL,OACG,sBAAKhC,UAAU,sBAAf,UACG,sBAAKA,UAAU,oBAAf,UACK,6CACI,8BACI,0BAAUC,KAAK,OAAOD,UAAU,WAAWE,KAAK,OAAOC,GAAG,OAAOR,MAAOH,KAAKJ,MAAMoC,SAAWnB,YAAY,wBAAwBD,SAAUZ,KAAKN,iBAEzJ,gCACA,8BACA,qBAAKY,IAAKN,KAAKV,MAAM4B,QAGrB,cAACuB,EAAA,EAAD,CAAQC,QAAQ,kBAAkBvB,QAASnB,KAAKmC,WAAhD,2BAGA,eAACQ,EAAA,EAAD,CAAOP,KAAMpC,KAAKJ,MAAMwC,KAAMQ,OAAQ5C,KAAKqC,YAAaQ,YAAU,EAAlE,UACI,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACJ,EAAA,EAAMK,MAAP,gCAEJ,cAACL,EAAA,EAAMM,KAAP,UACQ,cAAC,EAAD,SAOZ,8BACA,cAACR,EAAA,EAAD,CAAQC,QAAQ,UAAUQ,KAAK,KAAK/B,QAASnB,KAAK6B,YAAasB,UAAWnD,KAAKJ,MAAMoC,SAArF,uBAKJ,sBAAKxB,UAAU,gBAAf,UACG,sDACe,MAAbgC,GAAoC,MAAfA,EAAS,GAAa,wBAAU,qBAAKhC,UAAU,GAAf,SAEjDgC,EAAS1B,KAAI,SAAAC,GAAC,OAEX,sBAAKP,UAAU,kBAAf,UACI,qBAAKA,UAAU,aAAf,SACKO,EAAEgB,OAEP,qBAAKvB,UAAU,YAAf,SACI,qBAAKF,IAAKS,EAAEkB,0B,GAlF1Bb,aAkGPC,eAJS,SAAAzB,GACpB,MAAO,CAAE4C,SAAU5C,EAAM4C,SAAUtB,IAAOtB,EAAM0B,QAAQJ,OAGpB,CAAEY,cJvGb,SAACsB,GAAD,OAAS,SAAA5B,GAClCA,EAAS,CAAEf,KAAM9B,EAAewB,MAAMiD,MIsGelB,kBJnGxB,SAACkB,GAAD,OAAS,SAAA5B,GACtCA,EAAS,CAAEf,KAAM7B,EAAoBuB,MAAMiD,OIkGhC/B,CAA8DO,GC7F9DyB,MARf,WACE,OACE,8BACC,cAACC,EAAD,O,gBCiBUhC,EApBC,WAA+C,IAA9C1B,EAA6C,uDAArC,CAAE2B,QAAS,GAAIL,IAAK,IAAMqC,EAAW,uCAE1D,OAAQA,EAAO9C,MACX,KAAKtB,EAED,OADAqE,QAAQC,IAAI,cACL,2BAAK7D,GAAZ,IAAmB2B,QAASgC,EAAO9B,OAEvC,KAAKrC,EAED,OADAoE,QAAQC,IAAI,6BAA8BF,EAAO9B,MAC1C,2BAAK7B,GAAZ,IAAmBsB,IAAKqC,EAAO9B,OAEnC,KAAK7C,EAEG,OADA4E,QAAQC,IAAI,6BAA8BF,EAAO9B,MAC1C,2BAAK7B,GAAZ,IAAmBsB,IAAK,KAEhC,QACI,OAAOtB,I,QCPJ4C,EAZE,WAAuB,IAAtB5C,EAAqB,uDAAf,GAAI2D,EAAW,uCAErC,OAAQA,EAAO9C,MACX,KAAK9B,EAGD,OAFA6E,QAAQC,IAAI,sBAAsBF,GAE5B,GAAN,mBAAY3D,GAAZ,CAAoB2D,EAAOpD,QAC/B,QACI,OAAOP,ICNJ8D,EAAQC,YAAe,CAClCC,QAAS,CACPtC,QAAQA,EACRkB,SAASA,KCKOqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzF,MAAK,SAAC0F,GAClCA,EAAaC,kB","file":"static/js/main.4ee8431f.chunk.js","sourcesContent":["export const USER_POST_TEXT = 'USER_POST_TEXT'\nexport const REMOVE_SELECTED_URL = 'REMOVE_SELECTED_URL'\n\nexport const fetchPostText = (txt) => dispatch => {\n    dispatch({ type: USER_POST_TEXT,value:txt });\n}\n\nexport const removeSelectedUrl = (txt) => dispatch => {\n    dispatch({ type: REMOVE_SELECTED_URL,value:txt });\n}","const API = (link)=>{\n    return fetch(link)\n        .then(response => response.json())\n}\nexport default API","import API from \"../../Helpers/API\";\n\nexport const PROFILE_REQUEST = 'PROFILE_REQUEST'\nexport const PROFILE_SUCCESS = 'PROFILE_SUCCESS'\nexport const PROFILE_FAILURE = 'PROFILE_FAILURE'\n\nexport const SELECTED_URL = 'SELECTED_URL'\n\n\nexport const fetchProfile = (id) => dispatch => {\n    dispatch({ type: PROFILE_REQUEST })\n    return API(`https://api.giphy.com/v1/gifs/search?api_key=BQV3N2HNkpzkR72MCVh1Dw7rxqNW1bWD&q=${id}`)\n        .then(json => dispatch({ type: PROFILE_SUCCESS, data: json.data }))\n        .catch(err => dispatch({ type: PROFILE_FAILURE }))\n}\n\nexport const fetchSelectedUrl = (url) => dispatch => {\n    dispatch({ type: SELECTED_URL,data:url})\n   \n}\n\n\n\n","import  { Component  } from 'react';\nimport '../../App.css';\nimport { connect } from 'react-redux';\nimport { fetchProfile ,fetchSelectedUrl} from \"./actions\";\nimport debounce from 'lodash.debounce';\n\nclass GifSearch extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.fatchProfiles = debounce(this.fatchProfiles.bind(this), 1000);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClickForSelectGif = this.handleClickForSelectGif.bind(this);\n\n        this.state = {\n            searchValue: '',\n            selectedUrl:''\n        };\n    \n    }\n    handleChange(evnt) {\n       this.setState({\n            searchValue: evnt.target.value\n        });\n        this.fatchProfiles( evnt.target.value);\n    }\n    fatchProfiles(evnt){\n        this.props.fetchProfile(evnt);\n    }\n    handleClickForSelectGif(evnt){\n        this.props.fetchSelectedUrl( evnt.target.src);\n    }\n    render() {\n        let { gifs } = this.props; \n        return (\n            <div className=\"\">\n               <div>\n                    <input type=\"text\" className=\"searchGifText\" name=\"search\" id=\"search\" value={this.state.searchValue} onChange={this.handleChange} placeholder=\"Search\" />\n                </div>\n                {gifs  == null || gifs[0] == null ? <div /> : <div className=\"\">\n                    <div>\n                        {gifs.map(p =>\n                            <div key={p.id}>\n                                <img src={p.images.preview_gif.url}  className=\"Gif\" onClick={this.handleClickForSelectGif} ></img>\n                        </div>)}\n                    </div>\n\n                </div>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return { gifs: state.gifData.profile, url: state.gifData.url};\n}\n\nexport default connect(mapStateToProps, { fetchProfile ,fetchSelectedUrl})(GifSearch);\n","import  { Component  } from 'react';\nimport '../../App.css';\nimport { connect } from 'react-redux';\nimport { fetchPostText ,removeSelectedUrl} from \"./actions\";\n\nimport GifSearch from '../SearchModule/GifSearch';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal,Button} from 'react-bootstrap'\nclass Postbox extends Component {\n     constructor(props) {\n        super(props);\n       \n      \n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n       \n        this.state = {\n            postText: '',\n            isPost :false,\n            show:false\n           \n        };\n    \n    }\n \n    handleChange(event) {\n        this.setState({postText: event.target.value});\n    }\n    handleClick = () => {\n        this.props.fetchPostText({text : this.state.postText ,gif : this.props.url});\n        this.props.removeSelectedUrl(\"\");\n        this.setState({postText: ''});\n      }\n    handleShow =() =>{\n        this.setState({show: true});\n\n    }\n    handleClose = () =>{\n        this.setState({show:false});\n    }\n   \n    render() {\n       \n        let { postData } = this.props;\n         return (\n            <div className=\"createPostContainer\">\n               <div className=\"createPostWrapper\"> \n                    <h3>Create post</h3>\n                        <div>\n                            <textarea type=\"text\" className=\"postText\" name=\"post\" id=\"post\" value={this.state.postText}  placeholder=\"What is on your mind?\" onChange={this.handleChange} />\n                        </div>\n                    <div>\n                    <div>\n                    <img src={this.props.url}></img>\n                    \n                    </div>\n                    <Button variant=\"outline-success\" onClick={this.handleShow} >Choose GIF</Button>\n                        \n                    </div>\n                    <Modal show={this.state.show} onHide={this.handleClose} scrollable>\n                        <Modal.Header closeButton>\n                            <Modal.Title>  Choose a GIF </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                                <GifSearch>\n                                \n                                </GifSearch>\n                        </Modal.Body>\n                    \n                    </Modal>\n                \n                    <div>\n                    <Button variant=\"primary\" size=\"lg\" onClick={this.handleClick} disabled={!this.state.postText}>Post</Button>\n                    \n                    </div>\n                </div>\n               \n                <div className=\"postedWrapper\">\n                   <h4> display posted data</h4>\n                    {postData  == null || postData[0] == null ? <div /> : <div className=\"\">\n                \n                        {postData.map(p =>\n                    \n                            <div className=\"postedContainer\">\n                                <div className=\"postedText\">\n                                    {p.text}\n                                </div>\n                                <div className=\"postedGIF\">\n                                    <img src={p.gif}></img>\n                                </div>\n                            </div>\n                        )}\n                    </div>}\n                    \n                </div>\n              \n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return { postData: state.postData ,url :  state.gifData.url};\n}\n\nexport default connect(mapStateToProps, { fetchPostText ,removeSelectedUrl})(Postbox);\n","import React from 'react';\nimport PostFb from './features/chatbox/PostFb';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n     <PostFb/>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport { PROFILE_SUCCESS,SELECTED_URL, } from './actions'\nimport { REMOVE_SELECTED_URL } from '../chatbox/actions'\n\n\nconst gifData = (state = { profile: [], url: \"\" }, action) => {\n\n    switch (action.type) {\n        case PROFILE_SUCCESS:\n            console.log(\"data came \") \n            return { ...state, profile: action.data }; \n\n        case SELECTED_URL:\n            console.log(\"data came for SELECTED_URL\" ,action.data)\n            return { ...state, url: action.data }; \n\n        case REMOVE_SELECTED_URL:\n                console.log(\"data came for SELECTED_URL\" ,action.data)\n                return { ...state, url: \"\" }; \n                \n        default:\n            return state\n    }\n}\n\nexport default gifData\n","import {USER_POST_TEXT} from './actions'\n\nconst postData = (state=[], action) => {\n // let data = [];\n  switch (action.type) {\n      case USER_POST_TEXT:\n          console.log(\"chat text data came\",action);\n          \n          return  [...state , action.value];\n      default:\n          return state\n  }\n}\n\nexport default postData\n","import { configureStore } from '@reduxjs/toolkit';\nimport gifData from \"../features/SearchModule/reducers\";\nimport postData from \"../features/chatbox/reducers\";\n\nexport const store = configureStore({\n  reducer: {\n    gifData:gifData,\n    postData:postData\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}